{"version":3,"sources":["cart.js","main.js","typed.js"],"names":["$","updateTotal","let","subtotal","each","price","parseFloat","this","find","attr","quantity","parseInt","val","text","toFixed","delivery","replace","total","updateItemPrice","parent","priceElement","basePrice","click","closest","quantityInput","hasClass","on","isNaN","remove","tooltip","trigger","placement","document","mousemove","event","x","clientX","window","innerWidth","y","clientY","innerHeight","speed","data","moveX","moveY","css","e","stopPropagation","next","addClass","last","removeClass","swiperWrapper","querySelector","slides","Array","from","children","length","forEach","slide","clone","cloneNode","appendChild","brands","Swiper","slidesPerView","spaceBetween","loop","loopAdditionalSlides","autoplay","delay","disableOnInteraction","freeMode","freeModeMomentum","allowTouchMove","rtl","addEventListener","querySelectorAll","odometer","finalValue","dataset","value","setTimeout","innerHTML","Typed","strings","typeSpeed","backSpeed","backDelay","startDelay","showCursor"],"mappings":"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","file":"main.js","sourcesContent":["/**\r\n * Shopping Cart Functionality\r\n *\r\n * This script manages the shopping cart interactions, including:\r\n * - Updating item prices based on quantity changes\r\n * - Calculating subtotal, delivery cost, and total price\r\n * - Handling quantity increment and decrement\r\n * - Removing items from the cart\r\n *\r\n * @version 1.0\r\n */\r\n\r\n$(function () {\r\n    /**\r\n     * Updates the total price of the cart.\r\n     * It sums up the price of all items based on their quantity\r\n     * and adds the delivery cost.\r\n     */\r\n    function updateTotal() {\r\n        let subtotal = 0;\r\n        $(\".cart-item\").each(function () {\r\n            let price = parseFloat($(this).find(\".price\").attr(\"data-price\"));\r\n            let quantity = parseInt($(this).find(\".quantity-value\").val()) || 1;\r\n            subtotal += price * quantity;\r\n        });\r\n\r\n        $(\".subtotal-price\").text(`$${subtotal.toFixed(2)}`);\r\n\r\n        // Get delivery price and convert it to a number\r\n        let delivery = parseFloat($(\".delivery-price\").text().replace(\"$\", \"\")) || 0;\r\n\r\n        // Calculate total price\r\n        let total = subtotal + delivery;\r\n        $(\".total-price\").text(`$${total.toFixed(2)}`);\r\n    }\r\n\r\n    /**\r\n     * Updates the displayed price of a cart item.\r\n     *\r\n     * @param {jQuery} parent - The jQuery object of the cart item container.\r\n     */\r\n    function updateItemPrice(parent) {\r\n        let priceElement = parent.find(\".price\");\r\n        let basePrice = parseFloat(priceElement.attr(\"data-price\"));\r\n        let quantity = parseInt(parent.find(\".quantity-value\").val()) || 1;\r\n\r\n        priceElement.text(`$${(basePrice * quantity).toFixed(2)}`);\r\n        updateTotal();\r\n    }\r\n\r\n    // Event: Handle quantity increase and decrease buttons\r\n    $(\".quantity-input button\").click(function () {\r\n        let parent = $(this).closest(\".cart-item\");\r\n        let quantityInput = parent.find(\".quantity-value\");\r\n        let quantity = parseInt(quantityInput.val()) || 1;\r\n\r\n        if ($(this).hasClass(\"increase\")) {\r\n            quantity++;\r\n        } else if ($(this).hasClass(\"decrease\") && quantity > 1) {\r\n            quantity--;\r\n        }\r\n\r\n        quantityInput.val(quantity);\r\n        updateItemPrice(parent);\r\n    });\r\n\r\n    // Event: Handle direct input change in quantity field\r\n    $(\".quantity-value\").on(\"input\", function () {\r\n        let parent = $(this).closest(\".cart-item\");\r\n        let quantity = parseInt($(this).val());\r\n\r\n        if (isNaN(quantity) || quantity < 1) {\r\n            $(this).val(1);\r\n        }\r\n\r\n        updateItemPrice(parent);\r\n    });\r\n\r\n    // Event: Handle item removal from cart\r\n    $(\".item-remove-btn\").click(function () {\r\n        $(this).closest(\".cart-item\").remove();\r\n        updateTotal();\r\n    });\r\n\r\n    // Initial total calculation\r\n    updateTotal();\r\n});\r\n","$(function () {\r\n    \"use strict\";\r\n\r\n    /**\r\n     * Initializes Bootstrap tooltips.\r\n     */\r\n    $(\"[data-bs-toggle='tooltip']\").tooltip({\r\n        trigger: \"hover\",\r\n        placement: \"bottom\"\r\n    });\r\n\r\n    /**\r\n     * Handles mouse movement to create a parallax effect at @page index.html [Hero Section].\r\n     * Elements with the class \"abs\" will move based on cursor position.\r\n     */\r\n    $(document).mousemove(function (event) {\r\n        let x = event.clientX / window.innerWidth;\r\n        let y = event.clientY / window.innerHeight;\r\n\r\n        $(\".parallax-effect\").each(function () {\r\n            let speed = $(this).data(\"speed\");\r\n            let moveX = (x - 0.5) * speed * 10;\r\n            let moveY = (y - 0.5) * speed * 10;\r\n\r\n            $(this).css(\"transform\", `translate(${moveX}px, ${moveY}px)`);\r\n        });\r\n    });\r\n\r\n    /**\r\n     * Manages multi-level dropdowns.\r\n     * Allows toggling nested dropdowns without closing the parent menu.\r\n     */\r\n    $(\".dropdown-menu .dropdown-toggle\").on(\"click\", function (e) {\r\n        e.stopPropagation();\r\n        $(this).next(\".dropdown-menu\").addClass(\"show\");\r\n    });\r\n\r\n    /**\r\n     * Handles back button functionality inside dropdowns.\r\n     * Closes only the last opened submenu.\r\n     */\r\n    $(\".btn-back\").on(\"click\", function (e) {\r\n        e.stopPropagation();\r\n        $(\".dropdown-menu.show\").last().removeClass(\"show\");\r\n    });\r\n\r\n});\r\n\r\n/**\r\n * Ensures an infinite brand slider effect.\r\n * Duplicates brand slides if needed to maintain a seamless loop.\r\n */\r\nconst swiperWrapper = document.querySelector(\".brand-slider .swiper-wrapper\");\r\nconst slides = Array.from(swiperWrapper.children);\r\n\r\nwhile (swiperWrapper.children.length < 20) {\r\n    slides.forEach(slide => {\r\n        const clone = slide.cloneNode(true);\r\n        swiperWrapper.appendChild(clone);\r\n    });\r\n}\r\n\r\n/**\r\n * Initializes the Swiper.js brand slider.\r\n * Enables smooth, infinite scrolling from right to left.\r\n */\r\nconst brands = new Swiper(\".brand-slider\", {\r\n    slidesPerView: \"auto\",\r\n    spaceBetween: 30,\r\n    loop: true,\r\n    loopAdditionalSlides: 5, // Ensures seamless looping\r\n    autoplay: {\r\n        delay: 0,\r\n        disableOnInteraction: false,\r\n    },\r\n    freeMode: true,\r\n    freeModeMomentum: false,\r\n    allowTouchMove: false,\r\n    rtl: true,\r\n});\r\n\r\n\r\ndocument.addEventListener(\"DOMContentLoaded\", function () {\r\n    const odometers = document.querySelectorAll(\".odometer\");\r\n\r\n    odometers.forEach(odometer => {\r\n        let finalValue = odometer.dataset.value;\r\n        setTimeout(() => {\r\n            odometer.innerHTML = finalValue;\r\n        }, 500);\r\n    });\r\n});\r\n","document.addEventListener(\"DOMContentLoaded\", function () {\r\n    var options = {\r\n        strings: [\"Web Development\", \"Mobile App\", \"SEO Basics\", \"Social Marketing\"],\r\n        typeSpeed: 100,  \r\n        backSpeed: 50,   \r\n        backDelay: 500, \r\n        startDelay: 200, \r\n        loop: true,\r\n        showCursor: false    \r\n    };\r\n    new Typed(\"#typed-text\", options);\r\n});"]}